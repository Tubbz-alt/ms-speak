# ----------------------------------------------------
# This file is generated by the Qt Visual Studio Tools.
# ------------------------------------------------------
#
#  pie is required to be disabled in order to make the file look executable to
#  nautilus, The behavior is occurring because newer ubuntu distros set GCC default link
#  flag -pie, which marks e_type as ET_DYN on the binary file. Consequently, the Operating System
#  recognizes as Shared Library.
#QMAKE_LFLAGS += -no-pie

TEMPLATE = app
TARGET = MultiSpeaker
DESTDIR = ../run
QT += core xml network gui widgets
CONFIG += debug
DEFINES += QT_DLL QT_NETWORK_LIB QT_WIDGETS_LIB QT_XML_LIB #WIN64
INCLUDEPATH += ./GeneratedFiles \
    . \
    ./GeneratedFiles
DEPENDPATH += .
MOC_DIR += ./GeneratedFiles
OBJECTS_DIR += obj
UI_DIR += ./GeneratedFiles
RCC_DIR += ./GeneratedFiles
include(MultiSpeaker.pri)

#message("DESTDIR is : " $$DESTDIR)
#message("OBJECTS_DIR is : " $$OBJECTS_DIR)

# you can do something like this:
# debug {
#     LIBS += -L./libfolder -lmydebuglib.lib
# }
#
# release {
#     LIBS += -L./libfolder -lmyreleaselib.lib
# }
#
#
# Variables can be used to store the contents of environment variables.
# These can be evaluated at the time that qmake is run, or included in
# the generated Makefile for evaluation when the project is built.
#
# To obtain the contents of an environment value when qmakeis run, use
# the $$(...) operator.
#
# To obtain the contents of an environment value at the time when the
# generated Makefile is processed, use the $(...) operator.
#
# $$PWD which refers to the folder that contains your .pro file
#  It seems the INCLUDEPATH specified is relative to the build directory,
#  not relative to the directory with the .pro as one might easily assume.
#
# The official qmake page says:
# The PWD variable specifies the full path leading to the directory containing
# the current file being parsed. This can be useful to refer to files within the
# source tree when writing project files to support shadow builds.
#
# _PRO_FILE_
#   This variable contains the path to the project file in use.
# _PRO_FILE_PWD_
#   This variable contains the path to the directory containing the
#   project file in use.
#
#  For example, the following line causes the location of the project
#  file to be written to the console:
#
# message("_PRO_FILE_ is :" $$_PRO_FILE_)
#
# $${...}
# allows you to append the contents of the variable to another value
# without separating the two with a space.
